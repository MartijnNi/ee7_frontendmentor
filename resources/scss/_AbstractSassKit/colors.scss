@use "sass:math";
@use "sass:color";
@use "sass:map";

$ASK_CONFIG: ()!default;
// $colors: ();
// $theme-colors: ();

//// ==================================
// Variables / Maps
//// ==================================

$_ASK_COLORS: (
  'colors': (
    'red':      hsl(0, 80%, 50%),
    'green':    hsl(120, 60%, 50%),
    'blue':     hsl(240, 80%, 50%),
    
    'cyan':     hsl(191, 87%, 55%),
    'magenta':  hsl(300, 100%, 50%),
    'yellow':   hsl(60, 100%, 50%),
  
    'white':    hsl(0, 0%, 100%),
    'black':    hsl(300, 33%, 1%),
    'grey':     hsl(264, 4%, 50%),
  ),
);
// Check and set config variables
@if map-exists(ASK_CONFIG) {
  @if map.has-key($ASK_CONFIG, 'colors') {
    // Set user defined colors
    $_CUSTOM_COLORS: map.merge(map.get($_ASK_COLORS, 'colors'), map.get($ASK_CONFIG, 'colors'));
    $_ASK_COLORS: map.set($_ASK_COLORS, 'colors', $_CUSTOM_COLORS);
  }
} 
// Generate the color map
@each $_CLR_NAME, $_CLR in map.get($_ASK_COLORS, 'colors') {
  $_SHADES: ();
  $_STEP: 11;
  
  @for $i from 9 through 1 {
    $_NEW_LIGHTNESS: if($i == 5, lightness($_CLR), lightness($_CLR) + $_STEP * (5 - $i));
    $_NEW_SATURATION: if($i == 5, saturation($_CLR), saturation($_CLR) - $_STEP * math.div((5 - $i),2));
    $_NEW_SHADE: hsl(hue($_CLR), $_NEW_SATURATION, $_NEW_LIGHTNESS);
    $_SHADES: map.merge($_SHADES, ($i * 100: $_NEW_SHADE));
  }
  
  $_ASK_COLORS: map-merge($_ASK_COLORS, ('colors': map.merge(map.get($_ASK_COLORS, 'colors'), ($_CLR_NAME: $_SHADES))));
}

/// ===================================
// Functions
/// ===================================
/// 
/// @returns - defined color map
@function getColors() {
  @return map.get($_ASK_COLORS, 'colors');
}

/// @parameter $map - named key of colors map
@function shade-map($map) {
  $_CLRS: getColors();
  @if (map.has-key($_CLRS, $map)) {
    @return map.get($_CLRS, $map);
  } @else {
    @error "Not a color map '#{$map}'";
  }
}

/// @parameter $color - named key of colors map
/// @parameter $shade - submap key which represents the shade of the primary named key
@function color($color, $shade: 500) {
  $_CLRS: getColors();
  @if (map.get($_CLRS, $color, $shade)) {
    @return map.get($_CLRS, $color, $shade);
  } @else {
    @error "Not a color '#{$color}' shade: '#{$shade}'";
  }
}
/// @alias color
@function clr($color, $shade: 500) {
  @return color($color, $shade);
}

/// Returns a lighter hsl value
/// @parameter $color
/// @parameter $amount
@function hsl-lighten($color, $amount) {
  @return hsl(hue($color), saturation($color), lightness($color) + $amount);
}
/// Returns a darker hsl value
/// @parameter $color
/// @parameter $amount
@function hsl-darken($color, $amount) {
  @return hsl(hue($color), saturation($color), lightness($color) - $amount);
}
/// Returns a transparentized hsl color value
/// @parameter $color
/// @parameter $amount
@function hsl-alpha($color, $alpha) {
  @return hsla(hue($color), saturation($color), lightness($color), $alpha);
}

/// Returns RGB hex color
/// @parameter $color
@function toRGB($color) {
  @return unquote("rgb(" + red($color) + ", " + green($color) + ", " + blue($color)+ ");");
}

/// ===================================
// Mixins
/// ===================================

@mixin darkmode(){
  @if $color-scheme-enabled {
    @media (prefers-color-scheme: dark) {
      @content;
    }
  }
}
@mixin lightmode() {
  @if $color-scheme-enabled {
    @media (prefers-color-scheme: light) {
      @content;
    }
  }
}